
# Configura√ß√£o e Desenvolvimento em Node.js

## `.gitignore`
Criando arquivo `.gitignore` para Node.js:
```sh
gitignore node
npm i -D typescript
npm install typescript@4.3.5
npx tsc --init # Cria√ß√£o do arquivo tsconfig.json
npm install -D @types/node # TypeScript reconhece Node
npm install tsx -D # Para executar arquivos TS
npx tsc src/server.ts # Convers√£o de TS para JS
time node src/server.js # Medir tempo de execu√ß√£o
time tsx src/server.ts # Medir tempo de execu√ß√£o com tsx
```

## Instala√ß√£o de bibliotecas e ferramentas
```sh
npm i fastify
npm i @fastify/cookie
npm i eslint
npm i eslint @rocketseat/eslint-config -D
npx eslint --init
```

## Configura√ß√£o do VSCode
Arquivo: `/C:/Users/elvis/AppData/Roaming/Code/User/settings.json`
```json
"editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
}
```

## Banco de Dados
### Formas de conex√£o:
- **Drivers nativos**: Exemplo: `node-mssql2`, `node-postgres`, `node-mssql`
- **Query Builders**: Exemplo: `Knex.js`, `TypeORM`, `Prisma`
- **ORM**: Exemplo: `TypeORM`, `Sequelize`, `Prisma`

### Usando Knex
```sh
npm install knex sqlite3
npx knex init
npm knex migrate:make create_users
npm run knex -- migrate:make create_documents
npx knex migrate:latest
npx knex migrate:rollback
npx knex seed:make seed_users
npx knex seed:run
```

## TypeScript
```sh
npm install dotenv --force
npm install gitignore -g
gitignore node
```

## Valida√ß√£o com Zod
```sh
npm i zod --force
```

## Arquivo `.d.ts`
A pasta `@types` √© usada para criar interfaces de bibliotecas que n√£o possuem tipos, com arquivos `.d.ts`.

## Testes
Tipos de testes:
- Unit√°rio
- Integra√ß√£o
- E2E

### Bibliotecas
```sh
npm i vitest -D 
npm i supertest -D 
npm i @types/supertest -D --force
```

### Macetes
- `it.skip` pula o teste
- `it.todo` marca o teste como pendente
- `it.only` executa apenas o teste marcado

### Boas pr√°ticas
Evitar depend√™ncia entre testes. Testes E2E devem ser isolados.

## Compilar e Build
```sh
npm i tsup -D
node build/server.js
```

## Deploy
- render.com
- fly.io
- railway.com

---

### **Prisma ORM**
#### **Instala√ß√£o e configura√ß√£o**
```sh
npm i prisma -D
npx prisma init
npm i @prisma/client
npx prisma generate
```

#### **Migra√ß√£o do banco de dados**
```sh
npx prisma migrate dev
npx prisma migrate dev --name init
npx prisma migrate deploy
```

#### **Configura√ß√£o do editor**
Adicionar no arquivo `/C:/Users/elvis/AppData/Roaming/Code/User/settings.json`:
```json
"[prisma]": {
    "editor.formatOnSave": "true"
}
```

#### **Gerenciamento do banco de dados**
```sh
npx prisma studio
docker exec -it app_container sh
npx prisma studio
docker exec -it pg_container npx prisma studio
```

---

### **PostgreSQL (Docker)**
#### **Acessar containers e banco de dados**
```sh
docker exec -it pg_container psql -U user -h db -d apisolid
docker exec -it app_container psql -U user -h db -d apisolid
```

#### **Testar conex√£o dentro do container**
```sh
docker exec -it app_container psql -h pg_container -U user -d apisolid
docker exec -it app_container nc -zv pg_container 5432
```

#### **A√ß√µes no PostgreSQL**
```sh
docker exec -it pg_container psql -U postgres
psql -U postgres -d apisolid
psql -U postgres -h localhost -d apisolid
docker exec -it pg_container service postgresql status
docker exec -it pg_container service postgresql start
docker exec -it pg_container pg_createcluster 17 main --start
docker exec -it pg_container bash
```

#### **Opera√ß√µes de banco de dados**
```sh
docker exec -it app_container psql -U user -h db -d apisolid
ping pg_container
```

---

### **Prisma - Migra√ß√£o e Listagem**
```sh
npx prisma generate
npx prisma migrate dev
npx prisma migrate deploy
npx prisma migrate reset
```

#### **PostgreSQL - Consultas no banco**
```sh
docker exec -it pg_container psql -U user -d apisolid -c "\dt"
docker exec -it pg_container psql -U user -d apisolid -c "SELECT * FROM users;"
docker exec -it pg_container psql -U user -d apisolid -c "INSERT INTO users (name, email) VALUES ('Elvis', 'elvis@example.com');"
npx prisma migrate dev --name add_autoincrement
```

#### **Gerenciar logs e servi√ßos**
```sh
docker compose logs -f db
docker exec -it pg_container psql -U user -d apisolid -c "SELECT * FROM users;"
docker-compose up --build
```
## **Instala√ß√£o e Uso do Bcrypt com TypeScript**

### üîß Instala√ß√£o
Instale o `bcryptjs` e seus tipos:
```sh
npm install bcryptjs
npm install -D @types/bcrypt
